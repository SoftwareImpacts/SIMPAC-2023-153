==========
= README =
==========

The hyper1D folder contains the simplest 1D implementation of the Hyper2D finite volume solver,
for the Euler equations of gas dynamics, on a uniform grid.

In the simplest implementation, we use a forward Euler time integrator, with fixed time step.
The solution simply evolves from the initial state and according to the BCs.
All input data is specified inside the global_module.f03 file. You can modify it there, then
compile and run the code.
You should ensure that the time step is small enough as to respect the CFL condition, or
the solution will diverge.

The "higher_order" directory shows how to implement van Leer's MUSCL approach with TVD limiter,
and 3rd order WENO schemes with third-order TVD Runge-Kutta time integrators.
Also, in this directory, we employ a CFL-limited time marching: the time step is
adapted to ensure that the maximum Courant number throughout the domain is 
smaller than a threshold.
Various parameters are available in the global_module.f03 file, and allow to set the CFL,
the space and time order etc.

==================================
= COMPILING AND RUNNING THE CODE =
==================================

For compiling the code, go into the src directory and type "make".
This will create the 'hyper2d.exe' executable file. 
Copy it to the desired location and run it with:

$ ./hyper2d.exe

*****
***** NOTE THAT hyper2d WILL ATTEMPT TO WRITE THE OUTPUT INSIDE A LOCAL "dumps"
***** DIRECTORY. YOU NEED TO CREATE IT!
*****

=========================
= STRUCTURE OF THE CODE =
=========================

The hyper2d.f03 contains the main program.
The global settings are implemented in the global_module.f03 file.
The PDEs are implemented in the pde.f03 file.
The time integrator and the computation of numerical fluxes are inside integrator.f03.
The routine for exporting to dat file is in tools.f03.

The program goes like this:
1) The solution is initialized (calling pde.f03)
2) Boundary conditions are applied (calling pde.f03)
3) Time integration starts (calling integration.f03)
  3.1) Numerical fluxes are computed 
  3.2) The solution is updated in time
4) The solution is exported (calling tools.f03)


