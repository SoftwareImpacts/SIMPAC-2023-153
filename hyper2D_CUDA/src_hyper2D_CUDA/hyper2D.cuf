! ######################################################################
! ######################################################################
! ###########     _                           ____  ____      ##########   
! ###########    | |__  _   _ _ __   ___ _ __(___ \|  _ \     ##########
! ###########    | '_ \| | | | '_ \ / _ \ '__| __) | | | |    ##########
! ###########    | | | | |_| | |_) |  __/ |   / __/| |_| |    ##########
! ###########    |_| |_|\__, | .__/ \___|_|  /_____|____/     ##########
! ###########           |___/|_|                              ##########
! ###########                                                 ########## 
! ######################################################################
! ######################################################################

program hyper2D

  use cudafor

  use global_module   ! Simulation parameters: domain size, number of cells etc
  use pde             ! Definition of the system of equations
  use integration     ! Functions for integrating in time and numerical fluxes
  use tools           ! Output subroutines etc etc

  implicit none

  ! The solution is a 3D matrix. 
  ! The first index "eqID" represents the equation 
  ! (for Euler 1: density, 2: x-momentum, 3: y-momentum, 4: total energy)
  ! the second index "i" represents the x-position 
  ! the third index "j" represents the y-position.
  ! This might be counter-intuitive, but recall that Fortran represents data 
  ! in column-major order.

  real, dimension(Neq,Nx,Ny)         :: U, P ! Solution on the CPU
  real, dimension(Neq,Nx,Ny), device :: d_U, d_U_new  ! Solution on the GPU
  
  ! Maximum wave speed (for each block)
  real, dimension(N_BLOCKS_X,N_BLOCKS_Y)         :: ws_max_blocks
  real, dimension(N_BLOCKS_X,N_BLOCKS_Y), device :: d_ws_max_blocks

  ! Time integration variable
  integer :: t_ID
  integer :: err
  real    :: dt, t_now, CFL_max_domain

  type(dim3) :: grid, tBlock ! GPU Launch configuration

  write(*,*) "Initializing solution..."
  call initialize_solution(U) ! See the pde.f03 module

  write(*,*) "Writing solution at time step", 0, "..."
  call export_sol_vtk(0, U)

  write(*,*) "Copying initial solution to the GPU..."
  d_U = U
  
  ! ------- Prepare launch configuration ----------
  tBlock     = dim3(BLOCK_X_threads, BLOCK_Y_threads, 1)
  grid       = dim3(N_BLOCKS_X, N_BLOCKS_Y, 1)

  ! $$$$$$$$$$$ Integrate in time $$$$$$$$$$$$$

  t_now = 0.0
  dt    = 1.0d-15  ! Initial time step
  t_ID  = 0

  do while (t_now .lt. t_end)

    write(*,'(A6,F10.5,A8,F10.5,A16,I10,A11,F10.5)') 'Time: ', t_now, ' [s] of ', t_end, &
                                   ' [s] - Timestep ', t_ID, ' - Max CFL: ', CFL_max_domain
    t_now = t_now + dt  ! Update simulation time
    t_ID  = t_ID + 1

    ! ------ Integrate one step in time -----

    if (time_order .eq. 1) then ! -------- Forward Euler integration

      call assign_BCs<<<grid,tBlock>>>(d_U) ! Update BCs in real time in case periodicity is needed
      err = cudaDeviceSynchronize()

      d_U_new = d_U ! Init 
      call forward_Euler_step<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now) ! Updates d_U_new
      d_U = d_U_new ! Now U is updated

    else if (time_order .eq. 3) then ! -------- RK3 low storage

      ! 3rd order low storage Runge Kutta explicit method, 
      ! see Gottlieb & Shu (1998), Eq. 4.1, 4.2 and 4.3.
      ! 
      ! !!!!!!!! STABLE FOR Courant number < 0.32 !!!!!!!!!
      ! 
      ! u  = U % Init
      ! 
      ! % First step
      ! du = dt*L(u);
      ! u  = u + B1*du;
      ! 
      ! % Second step
      ! du = A2*du + dt*L(u);
      ! u  = u + B2*du;
      ! 
      ! % Third step
      ! du = A3*du + dt*L(u):
      ! u  = u + B3*du;
      ! 
      ! U = u % Here we go.
      ! 
      ! With: 
      ! 
      ! A2 =   -2.915492524638791
      ! A3 =   -9.351737557288897e-08
      ! 
      ! B1 =    9.245740000000000e-01
      ! B2 =    2.877130631867487e-01 
      ! B3 =    6.265381095127399e-01 
      ! 
      ! Note: in the following, we use "d_U_new" as du.
      !  

      call assign_BCs<<<grid,tBlock>>>(d_U) ! Update BCs in real time in case periodicity is needed
      err = cudaDeviceSynchronize()

      ! ++++++++++ First step +++++++++++

      call RK_low_storage_step_dU<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, 0.0)

      err = cudaDeviceSynchronize()

      call RK_low_storage_step_U<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, real(0.92457d0))

      call assign_BCs<<<grid,tBlock>>>(d_U) ! Update BCs in real time in case periodicity is needed
      err = cudaDeviceSynchronize()

      ! ++++++++++ Second step +++++++++++

      call RK_low_storage_step_dU<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, real(-2.915492524638791d0))

      err = cudaDeviceSynchronize()
      
      call RK_low_storage_step_U<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, real(0.2877130631867487d0))

      call assign_BCs<<<grid,tBlock>>>(d_U) ! Update BCs in real time in case periodicity is needed
      err = cudaDeviceSynchronize()

      ! ++++++++++ Third step +++++++++++

      call RK_low_storage_step_dU<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, real(-9.351737557288897d-08))

      err = cudaDeviceSynchronize()

      call RK_low_storage_step_U<<<grid,tBlock>>>(d_U, d_U_new, dt, t_now, real(0.6265381095127399d0))

      call assign_BCs<<<grid,tBlock>>>(d_U) ! Update BCs in real time in case periodicity is needed
      err = cudaDeviceSynchronize()

    else 

      write(*,*) "Attention! Time integration order not recognized! Check global_module file!"
      write(*,*) "Aborting!"
      stop

    end if

    ! ------ Update time step from CFL condition
    call compute_ws_max_blocks<<<grid,tBlock>>>(d_U, d_ws_max_blocks)
    ws_max_blocks  = d_ws_max_blocks ! Download maximum wave speeds from the GPU
    CFL_max_domain = maxval(ws_max_blocks)/min(dx,dy)*dt ! For printing purposes
    dt             = min(CFL_target*min(dx,dy)/maxval(ws_max_blocks), dt_max)  ! Find allowable time step

    ! ------- Write to VTK every ... timesteps
    if ( mod(t_ID, WRITE_VTK_EACH) .EQ. 0 ) then 
 
      write(*,*) "Writing solution at time step", t_ID, "..."
      U = d_U ! Download solution from the GPU
      call export_sol_vtk(t_ID, U)
 
    end if

  end do

  err = cudaDeviceReset()

end program
