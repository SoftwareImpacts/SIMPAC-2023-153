module global_module

! This module contains data needed throughout the program. 
! Most data is specified as a parameter, as to make the execution faster.
! This module is loaded by most other modules.

  implicit none
  
  ! Time integration

  real, parameter :: CFL_target  = 0.1   ! Target CFL for the simulation
  real, parameter :: t_end       = 80.0d0  ! [s] total simulated time (from 0 to t_end)
  real, parameter :: dt_max      = 0.01    ! [s] maximum admissible time step (useful if you have sources)

  integer, parameter :: WRITE_VTK_EACH = 200 ! Write a VTK file each this many time steps

  ! Specify domain and discretization

  real, parameter :: x_min = 0.0 ! [m] 
  real, parameter :: x_max = 1.0  ! [m] 
  real, parameter :: y_min = 0.0 ! [m] 
  real, parameter :: y_max = 1.0  ! [m] 

  ! Boundary conditions 
  logical, parameter :: bool_AXI = .False. ! Axi-symmetric simulation? Modifies 1) update and 2) BCs

  logical, parameter :: X_PERIODIC = .False.
  logical, parameter :: Y_PERIODIC = .False.

  logical, parameter :: X_low_ZEROGRAD  = .False.
  logical, parameter :: X_high_ZEROGRAD = .True.
  logical, parameter :: Y_low_ZEROGRAD  = .False.
  logical, parameter :: Y_high_ZEROGRAD = .True.

  ! Spacial accuracy (order)
  ! 1: uniform sol in cell, first order in space
  ! 2: MUSCL with TVD slope limiter, second order in space
  ! 3: WENO 3rd order
  ! 5: WENO 5th order
  integer, parameter :: space_order = 2

  ! Time accuracy (order)
  ! 1: forward Euler, first order in time
  ! 3: explicit TVD Runge-Kutta, third order in time
  integer, parameter :: time_order = 1

  ! ======== CUDA launch configuration and GRID ==========
  ! Threads per block along x and y

  integer, parameter :: BLOCK_X_threads = 8 
  integer, parameter :: BLOCK_Y_threads = 8
  
  integer, parameter :: N_BLOCKS_X = 50
  integer, parameter :: N_BLOCKS_Y = 50

  ! Total number of cells (including 2 ghost cells for each side)
  ! (using 2 ghost cells makes it easy to reach second order accuracy)
  ! Note: use a multiple of the number of threads per block

  integer, parameter :: Nx = N_BLOCKS_X*BLOCK_X_threads
  integer, parameter :: Ny = N_BLOCKS_Y*BLOCK_Y_threads

  real, parameter :: dx = (x_max-x_min)/real(Nx-8)
  real, parameter :: dy = (y_max-y_min)/real(Ny-8)

end module
