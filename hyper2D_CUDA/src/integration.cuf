module integration

! This module contains the routines for the time integration and the computation
! of numerical fluxes (Rusanov in this example).

  use ieee_arithmetic
  use pde
  use global_module

  implicit none
  
  real, dimension(Neq,Nx,Ny) :: U_new ! Working variable

  contains

  ! ======================================================================== 
  
  attributes(global) subroutine forward_Euler_step(U, U_new, dt, t_now)

    ! This kernel performs one step of the Forward Euler explicit time integrator 

    implicit none
 
    real, dimension(Neq,Nx,Ny) :: U, U_new ! Device variable in global memory
    real, value :: dt, t_now ! Value that we pass from host space to the kernel

    integer :: i, j, eqID
    
    real, dimension(Neq) :: F_N, F_S, F_W, F_E, Src

    real :: y_j, y_jmhalf, y_jphalf ! For axisymm simulations

    ! Find coordinates of the present thread (aka cell i and j)
    i = (blockIdx%x - 1)*blockDim%x + threadIDx%x
    j = (blockIdx%y - 1)*blockDim%y + threadIDx%y


    ! Update solution using the forward Euler integrator - INTERNAL CELLS only,
    ! do not overwrite ghost cells
    if ( (i .ge. 5) .and. (i .le. Nx-4) .and. (j .ge. 5) .and. (j .le. Ny-4) ) then

        ! call compute_fluxes_Rusanov(U, i, j, F_N, F_S, F_W, F_E)
        call compute_fluxes_HLL(U, i, j, F_N, F_S, F_W, F_E)

        call compute_source_term(U(:,i,j), i, j, Src)

        if (bool_AXI) then ! ******* Axi-symmetric simulation ********

          ! Geometry
          y_j      = y_min + dy/2.0d0 + (real(j)-5.0d0)*dy
          y_jmhalf = y_j - dy/2.0d0
          y_jphalf = y_j + dy/2.0d0

          ! Update step
          U_new(:,i,j) = U(:,i,j) - dt/dx*(F_E - F_W) - dt/(dy*y_j)*(F_N*y_jphalf - F_S*y_jmhalf) + dt*Src

        else ! ******* Planar geometry *******

          U_new(:,i,j) = U(:,i,j) - dt/dx*(F_E - F_W) - dt/dy*(F_N - F_S) + dt*Src

        end if
        
        ! Check that the solution did not diverge
        do eqID = 1, Neq
          if (ieee_is_nan(U_new(eqID,i,j))) then 
            print*, 'Solution diverged, try with a smaller time step! Aborting.'
            stop
          end if
        end do

    end if

  end subroutine

  ! ======================================================================== 
  
  attributes(global) subroutine RK_low_storage_step_dU(U, dU, dt, t_now, A)

    ! This kernel performs one step of the low storage Runge-Kutta method
    ! as described by Gottlieb & Shu (1998)

    implicit none
 
    real, dimension(Neq,Nx,Ny) :: U, dU ! Device variable in global memory
    real, value :: dt, t_now ! Value that we pass from host space to the kernel
    real, value :: A ! Value for the low-storage RK method

    integer :: i, j, eqID
    
    real, dimension(Neq) :: F_N, F_S, F_W, F_E, Src

    real :: y_j, y_jmhalf, y_jphalf ! For axisymm simulations

    ! Find coordinates of the present thread (aka cell i and j)
    i = (blockIdx%x - 1)*blockDim%x + threadIDx%x
    j = (blockIdx%y - 1)*blockDim%y + threadIDx%y

    ! Update solution using the forward Euler integrator - INTERNAL CELLS only,
    ! do not overwrite ghost cells
    if ( (i .ge. 5) .and. (i .le. Nx-4) .and. (j .ge. 5) .and. (j .le. Ny-4) ) then

        ! call compute_fluxes_Rusanov(U, i, j, F_N, F_S, F_W, F_E)
        call compute_fluxes_HLL(U, i, j, F_N, F_S, F_W, F_E)

        call compute_source_term(U(:,i,j), i, j, Src)

        if (bool_AXI) then ! ******* Axi-symmetric simulation ********

          ! Geometry
          y_j      = y_min + dy/2.0d0 + (real(j)-5.0d0)*dy ! Remember, 4 ghost cells per side
          y_jmhalf = y_j - dy/2.0d0
          y_jphalf = y_j + dy/2.0d0

          ! Update step
          dU(:,i,j) = A*dU(:,i,j) - dt/dx*(F_E - F_W) - dt/(dy*y_j)*(F_N*y_jphalf - F_S*y_jmhalf) + dt*Src

        else ! ******* Planar geometry *******

          dU(:,i,j) = A*dU(:,i,j) - dt/dx*(F_E - F_W) - dt/dy*(F_N - F_S)

        end if
        
    end if

  end subroutine

  ! ======================================================================== 

  attributes(global) subroutine RK_low_storage_step_U(U, dU, dt, t_now, B)

    ! This kernel performs one step of the low storage Runge-Kutta method
    ! as described by Gottlieb & Shu (1998)

    implicit none
 
    real, dimension(Neq,Nx,Ny) :: U, dU ! Device variable in global memory
    real, value :: dt, t_now ! Value that we pass from host space to the kernel
    real, value :: B ! Value for the low-storage RK method

    integer :: i, j, eqID
    
    real, dimension(Neq) :: F_N, F_S, F_W, F_E 

    ! Find coordinates of the present thread (aka cell i and j)
    i = (blockIdx%x - 1)*blockDim%x + threadIDx%x
    j = (blockIdx%y - 1)*blockDim%y + threadIDx%y

    ! Update solution using the forward Euler integrator - INTERNAL CELLS only,
    ! do not overwrite ghost cells
    if ( (i .ge. 5) .and. (i .le. Nx-4) .and. (j .ge. 5) .and. (j .le. Ny-4) ) then

        U(:,i,j) = U(:,i,j) + B*dU(:,i,j)
        
    end if

  end subroutine

  ! ======================================================================== 

  attributes(device) subroutine compute_fluxes_Rusanov(U, i, j, F_N, F_S, F_W, F_E)

    ! Computes Rusanov numerical fluxes for the cell (i,j)

    implicit none

    real, dimension(Neq,Nx,Ny), intent(in)  :: U
    real, dimension(Neq),       intent(out) :: F_N, F_S, F_W, F_E 
    integer, intent(in) :: i, j

    integer :: eqID
    real, dimension(Neq) :: U_L, U_R, F_L, F_R

    real :: ws_min_L, ws_max_L, ws_min_R, ws_max_R, ws_max ! wave speeds

    ! ------ North interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i,j-2), U(:,i,j-1), U(:,i,j), U(:,i,j+1), U(:,i,j+2), U(:,i,j+3), U_L, U_R)

    call compute_flux_ws_y(U_L, F_L, ws_max_L, ws_min_L) 
    call compute_flux_ws_y(U_R, F_R, ws_max_R, ws_min_R)

    ws_max = MAX(ABS(ws_max_L), ABS(ws_min_L), ABS(ws_max_R), ABS(ws_min_R))

    F_N = 0.5*(F_R + F_L) - ws_max/2.0*(U_R-U_L) ! Rusanov flux

    ! ------ South interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i,j-3), U(:,i,j-2), U(:,i,j-1), U(:,i,j), U(:,i,j+1), U(:,i,j+2), U_L, U_R)

    call compute_flux_ws_y(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_y(U_R, F_R, ws_max_R, ws_min_R)

    ws_max = MAX(ABS(ws_max_L), ABS(ws_min_L), ABS(ws_max_R), ABS(ws_min_R))

    F_S = 0.5*(F_R + F_L) - ws_max/2.0*(U_R-U_L) ! Rusanov flux

    ! ------ East interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i-2,j), U(:,i-1,j), U(:,i,j), U(:,i+1,j), U(:,i+2,j), U(:,i+3,j), U_L, U_R)

    call compute_flux_ws_x(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_x(U_R, F_R, ws_max_R, ws_min_R)

    ws_max = MAX(ABS(ws_max_L), ABS(ws_min_L), ABS(ws_max_R), ABS(ws_min_R))

    F_E = 0.5*(F_R + F_L) - ws_max/2.0*(U_R-U_L) ! Rusanov flux

    ! ------ West interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i-3,j), U(:,i-2,j), U(:,i-1,j), U(:,i,j), U(:,i+1,j), U(:,i+2,j), U_L, U_R)

    call compute_flux_ws_x(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_x(U_R, F_R, ws_max_R, ws_min_R)

    ws_max = MAX(ABS(ws_max_L), ABS(ws_min_L), ABS(ws_max_R), ABS(ws_min_R))

    F_W = 0.5*(F_R + F_L) - ws_max/2.0*(U_R-U_L) ! Rusanov flux

  end subroutine

  ! ======================================================================== 

  attributes(device) subroutine compute_fluxes_HLL(U, i, j, F_N, F_S, F_W, F_E)

    ! Computes HLL numerical fluxes for the cell (i,j)

    implicit none

    real, dimension(Neq,Nx,Ny), intent(in)  :: U
    real, dimension(Neq),       intent(out) :: F_N, F_S, F_W, F_E 
    integer, intent(in) :: i, j

    integer :: eqID
    real, dimension(Neq) :: U_L, U_R, F_L, F_R

    real :: ws_min_L, ws_max_L, ws_min_R, ws_max_R, ws_min, ws_max ! wave speeds

    ! ------ North interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i,j-2), U(:,i,j-1), U(:,i,j), U(:,i,j+1), U(:,i,j+2), U(:,i,j+3), U_L, U_R)

    call compute_flux_ws_y(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_y(U_R, F_R, ws_max_R, ws_min_R)

    ws_min = MIN(ws_min_L, ws_min_R)
    ws_max = MAX(ws_max_L, ws_max_R)

    ! HLL fluxes
    if (ws_min .ge. 0.0) then
      F_N = F_L
    else if (ws_max .lt. 0.0) then
      F_N = F_R
    else
      F_N = (ws_min*ws_max*(U_R - U_L) + ws_max*F_L - ws_min*F_R)/(ws_max - ws_min);
    end if

    ! ------ South interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i,j-3), U(:,i,j-2), U(:,i,j-1), U(:,i,j), U(:,i,j+1), U(:,i,j+2), U_L, U_R)

    call compute_flux_ws_y(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_y(U_R, F_R, ws_max_R, ws_min_R)

    ws_min = MIN(ws_min_L, ws_min_R)
    ws_max = MAX(ws_max_L, ws_max_R)

    ! HLL fluxes
    if (ws_min .ge. 0.0) then
      F_S = F_L
    else if (ws_max .lt. 0.0) then
      F_S = F_R
    else
      F_S = (ws_min*ws_max*(U_R - U_L) + ws_max*F_L - ws_min*F_R)/(ws_max - ws_min);
    end if

    ! ------ East interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i-2,j), U(:,i-1,j), U(:,i,j), U(:,i+1,j), U(:,i+2,j), U(:,i+3,j), U_L, U_R)

    call compute_flux_ws_x(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_x(U_R, F_R, ws_max_R, ws_min_R)

    ws_min = MIN(ws_min_L, ws_min_R)
    ws_max = MAX(ws_max_L, ws_max_R)
    
    ! HLL fluxes
    if (ws_min .ge. 0.0) then
      F_E = F_L
    else if (ws_max .lt. 0.0) then
      F_E = F_R
    else
      F_E = (ws_min*ws_max*(U_R - U_L) + ws_max*F_L - ws_min*F_R)/(ws_max - ws_min);
    end if

    ! ------ West interface

    ! Reconstruct the solution, passing the four cells that neighbor the interface
    call reconstruct_sol_interface(U(:,i-3,j), U(:,i-2,j), U(:,i-1,j), U(:,i,j), U(:,i+1,j), U(:,i+2,j), U_L, U_R)

    call compute_flux_ws_x(U_L, F_L, ws_max_L, ws_min_L)
    call compute_flux_ws_x(U_R, F_R, ws_max_R, ws_min_R)

    ws_min = MIN(ws_min_L, ws_min_R)
    ws_max = MAX(ws_max_L, ws_max_R)

    ! HLL fluxes
    if (ws_min .ge. 0.0) then
      F_W = F_L
    else if (ws_max .lt. 0.0) then
      F_W = F_R
    else
      F_W = (ws_min*ws_max*(U_R - U_L) + ws_max*F_L - ws_min*F_R)/(ws_max - ws_min);
    end if

  end subroutine

  ! ============================================================

  attributes(global) subroutine compute_ws_max_blocks(U, ws_max_blocks)

    implicit none
    
    ! These are device variables
    real, dimension(Neq,Nx,Ny) :: U
    real, dimension(N_BLOCKS_X,N_BLOCKS_Y) :: ws_max_blocks

    integer :: block_ID_x, block_ID_y, i, j
    real    :: Smin_x, Smax_x, Smin_y, Smax_y, dummy

    ! Current block
    block_ID_x = blockIDx%x
    block_ID_y = blockIDx%y

    ! The fist element of the block sets the value to zero
    if ( (threadIdx%x .eq. 1) .and. (threadIdx%y .eq. 1) ) then
      ws_max_blocks(block_ID_x, block_ID_y) = 0.0
    end if 
    call syncthreads() ! Wait that this was done! Or this may be a problem

    ! Current cell (aka thread)
    i = (blockIdx%x - 1)*blockDim%x + threadIdx%x
    j = (blockIdx%y - 1)*blockDim%y + threadIdx%y

    call compute_max_min_wavespeeds_xy(U(:,i,j), Smax_x, Smin_x, Smax_y, Smin_y)

    ! Compute max in the block
    dummy = atomicmax(ws_max_blocks(block_ID_x, block_ID_y), max(abs(Smin_x),abs(Smax_x),abs(Smin_y),abs(Smax_y)))

  end subroutine

  ! ======================================================================== 

  attributes(device) subroutine reconstruct_sol_interface(U_m3, U_m2, U_m1, U_p1, U_p2, U_p3, U_L, U_R)

    ! Takes the four points around an interface (minus_1, minus_2, plus_1, plus_2) and 
    ! computes the left and right states using first order or MUSCL TVD-limited reconstruction

    real, dimension(Neq), intent(in)  :: U_m3, U_m2, U_m1, U_p1, U_p2, U_p3
    real, dimension(Neq), intent(out) :: U_L, U_R

    ! Working variables
    integer              :: eID              ! equation ID
    real                 :: theta_L, theta_R ! ratio of consecutive gradients
    real, dimension(Neq) :: P_m3, P_m2, P_m1, P_p1, P_p2, P_p3, P_L, P_R ! primitive variables 

    real :: d0, d1, b0, b1, a0, a1, omega0, omega1, P0, P1 ! WENO 3rd order
    real :: b2, a2, omega2, P2                             ! additional for WENO 5th order

    if (space_order .EQ. 1) then      ! ***** First order solution *****

      U_L = U_m1
      U_R = U_p1

    else if (space_order .eq. 2) then ! ***** Second order solution - MUSCL TVD *****

      ! Perform reconstruction in primitive variables 
      call compute_primitive_from_conserved(U_m2, P_m2)
      call compute_primitive_from_conserved(U_m1, P_m1)
      call compute_primitive_from_conserved(U_p1, P_p1)
      call compute_primitive_from_conserved(U_p2, P_p2)

      do eID = 1, Neq ! Loop on the quantities

        ! Compute ratio of consecutive gradients
        theta_L = (P_p1(eID) - P_m1(eID))/(P_m1(eID) - P_m2(eID) + 1.0d-15) ! Add a small tolerance
        theta_R = (P_p2(eID) - P_p1(eID))/(P_p1(eID) - P_m1(eID) + 1.0d-15) ! Add a small tolerance

        ! Limited linear reconstruction 
        P_L(eID) = P_m1(eID) + phi_limiter(theta_L)*(P_m1(eID) - P_m2(eID))/2.0
        P_R(eID) = P_p1(eID) - phi_limiter(1.0/real(theta_R+1.0d-15))*(P_p2(eID) - P_p1(eID))/2.0

      end do

      ! Compute conservative variables
      call compute_conserved_from_primitive(P_L, U_L)
      call compute_conserved_from_primitive(P_R, U_R)

    else if (space_order .eq. 3) then ! ***** Third order solution - WENO3 *****

      ! Perform reconstruction in primitive variables 
      call compute_primitive_from_conserved(U_m2, P_m2)
      call compute_primitive_from_conserved(U_m1, P_m1)
      call compute_primitive_from_conserved(U_p1, P_p1)
      call compute_primitive_from_conserved(U_p2, P_p2)

      do eID = 1, Neq ! Loop on the quantities

        ! ---------- APPROXIMATE v_int^L (left state) ------------

        d0 = 2.0/3.0
        d1 = 1.0/3.0

        b0 = (P_p1(eID) - P_m1(eID))**2
        b1 = (P_m1(eID) - P_m2(eID))**2

        a0 = d0/(0.000001 + b0)**2
        a1 = d1/(0.000001 + b1)**2

        omega0 = a0/(a0+a1) ! Rescale
        omega1 = a1/(a0+a1) ! Rescale

        ! Approximate v for r=0 and r=1
        P0 = 0.5*P_m1(eID) + 0.5*P_p1(eID)
        P1 = -0.5*P_m2(eID) + 3.0/2.0*P_m1(eID)

        P_L(eID) = omega0*P0 + omega1*P1

        ! ---------- APPROXIMATE v_int^R (right state) ------------

        b0 = (P_p1(eID) - P_m1(eID))**2
        b1 = (P_p2(eID) - P_p1(eID))**2

        a0 = d0/(0.000001 + b0)**2
        a1 = d1/(0.000001 + b1)**2

        omega0 = a0/(a0+a1) ! Rescale
        omega1 = a1/(a0+a1) ! Rescale

        ! Approximate v for r=0 and r=1
        P0 = 0.5*P_m1(eID) + 0.5*P_p1(eID)
        P1 = -0.5*P_p2(eID) + 3.0/2.0*P_p1(eID)

        P_R(eID) = omega0*P0 + omega1*P1;

      end do

      ! Compute conservative variables
      call compute_conserved_from_primitive(P_L, U_L)
      call compute_conserved_from_primitive(P_R, U_R)

    else if (space_order .eq. 5) then ! ***** 5th order solution - WENO5 *****

      ! Perform reconstruction in primitive variables 
      call compute_primitive_from_conserved(U_m3, P_m3)
      call compute_primitive_from_conserved(U_m2, P_m2)
      call compute_primitive_from_conserved(U_m1, P_m1)
      call compute_primitive_from_conserved(U_p1, P_p1)
      call compute_primitive_from_conserved(U_p2, P_p2)
      call compute_primitive_from_conserved(U_p3, P_p3)

      do eID = 1, Neq ! Loop on the quantities

        ! ---------- APPROXIMATE v_int^L (left state) ------------

        b0 = 13.0d0/12.0d0*(P_m3(eID)-2.0*P_m2(eID) + P_m1(eID))**2 &
           + 1.0d0/4.0d0*(P_m3(eID)-4.0*P_m2(eID)+3.0*P_m1(eID))**2

        b1 = 13.0d0/12.0d0*(P_m2(eID)-2.0*P_m1(eID) + P_p1(eID))**2 &
           + 1.0d0/4.0d0*(P_m2(eID)-P_p1(eID))**2

        b2 = 13.0d0/12.0d0*(P_m1(eID)-2.0*P_p1(eID) + P_m2(eID))**2 &
           + 1.0d0/4.0d0*(3.0*P_m1(eID)-4.0*P_p1(eID)+P_p2(eID))**2

        a0 = 1.0d0/10.0d0*(1.0d0/(1.0d-6 + b0)**2)
        a1 = 6.0d0/10.0d0*(1.0d0/(1.0d-6 + b1)**2)
        a2 = 3.0d0/10.0d0*(1.0d0/(1.0d-6 + b2)**2)

        omega0 = a0/(a0+a1+a2)
        omega1 = a1/(a0+a1+a2)
        omega2 = a2/(a0+a1+a2)

        P_L(eID) = omega0*(2.0d0/6.0d0*P_m3(eID) - 7.0d0/6.0d0*P_m2(eID) + 11.0d0/6.0d0*P_m1(eID)) &
                 + omega1*(-1.0d0/6.0d0*P_m2(eID) + 5.0d0/6.0d0*P_m1(eID) + 2.0d0/6.0d0*P_p1(eID)) &
                 + omega2*(2.0d0/6.0d0*P_m1(eID) + 5.0d0/6.0d0*P_p1(eID) - 1.0d0/6.0d0*P_p2(eID))

        ! ---------- APPROXIMATE v_int^R (right state) ------------

        b0 = 13.0d0/12.0d0*(P_p1(eID)-2.0*P_p2(eID) + P_p3(eID))**2 &
           + 1.0d0/4.0d0*(3.0*P_p1(eID)-4.0*P_p2(eID)+P_p3(eID))**2

        b1 = 13.0d0/12.0d0*(P_m1(eID)-2.0*P_p1(eID) + P_p2(eID))**2 &
           + 1.0d0/4.0d0*(P_m1(eID)-P_p2(eID))**2

        b2 = 13.0d0/12.0d0*(P_m2(eID)-2.0*P_m1(eID) + P_p1(eID))**2 &
           + 1.0d0/4.0d0*(P_m2(eID)-4.0*P_m1(eID)+3.0*P_p1(eID))**2

        a0 = 1.0d0/10.0d0*(1.0d0/(1.0d-6 + b0)**2)
        a1 = 6.0d0/10.0d0*(1.0d0/(1.0d-6 + b1)**2)
        a2 = 3.0d0/10.0d0*(1.0d0/(1.0d-6 + b2)**2)

        omega0 = a0/(a0+a1+a2)
        omega1 = a1/(a0+a1+a2)
        omega2 = a2/(a0+a1+a2)

        P_R(eID) = omega2*(-1.0d0/6.0d0*P_m2(eID) + 5.0d0/6.0d0*P_m1(eID) + 2.0d0/6.0d0*P_p1(eID)) &
                 + omega1*(2.0d0/6.0d0*P_m1(eID)  + 5.0d0/6.0d0*P_p1(eID) - 1.0d0/6.0d0*P_p2(eID)) &
                 + omega0*(11.0d0/6.0d0*P_p1(eID) - 7.0d0/6.0d0*P_p2(eID) + 2.0d0/6.0d0*P_p3(eID)) 

      end do

      ! Compute conservative variables
      call compute_conserved_from_primitive(P_L, U_L)
      call compute_conserved_from_primitive(P_R, U_R)

    end if

  end subroutine

  ! ========================================================================

  attributes(device) real function phi_limiter(theta)

    real, intent(in) :: theta ! ratio of consecutive gradients

    ! phi_limiter = max(0.0, min(1.0, theta)) ! minmod
    ! phi_limiter = (theta*theta + theta)/(theta*theta + 1.0) ! van Albada symmetric limiter
    phi_limiter = (theta + abs(theta))/(1.0 + abs(theta)) ! van Leer limiter

  end function

end module
