module pde

! This module contains all information that appears inside the PDEs.
! It specifies how many equations shall be solved, the numerical data,
! the routines to compute the fluxes from the solution, routines for
! computing primitive variables from the conserved solution U, etc.
!
! ----- EULER EQUATIONS -------

  use global_module

  implicit none

  integer, parameter :: Neq = 4 ! Number of equations

  real, parameter :: M      = 5.3136d-26   ! [kg] molecular mass 
  real, parameter :: Gam    = 5.0d0/3.0d0  ! (relativistic) adiabatic constant
  real, parameter :: c      = 1.0d0        ! Speed of light
  real, parameter :: PI     = 4.0d0*DATAN(1.0d0)

  ! Name of primitive variables, used ONLY for exporting the solution to VTK file
  ! NOTE: To initialize it here, all entries need to have the same length!!!
  !       I'm using three letters for simplicity.
  character(len=20), dimension(Neq) :: prim_names = (/'rho','UUx','UUy','PPP'/)

  contains

  ! ============================================================

  subroutine initialize_solution(U)
 
    implicit none

    real, dimension(:,:,:), intent(inout) :: U

    ! Primitive variables
    real :: rho0, ux0, uy0, P0 ! Background 
    real :: rhoJ, uxJ, uyJ, PJ ! Jet

    real, dimension(Neq) :: U0, prim0, UJ, primJ
 
    integer      :: i, j

    ! Background
    rho0 = 10.0
    ux0  = 0.0
    uy0  = 0.0
    P0   = 0.01

    prim0(1) = rho0
    prim0(2) = ux0
    prim0(3) = uy0
    prim0(4) = P0

    call CPU_compute_conserved_from_primitive(prim0, U0)

    ! Jet
    rhoJ = 0.1
    uxJ  = 0.99
    uyJ  = 0.0
    PJ   = 0.01

    primJ(1) = rhoJ
    primJ(2) = uxJ
    primJ(3) = uyJ
    primJ(4) = PJ

    call CPU_compute_conserved_from_primitive(primJ, UJ)

    ! THIS INITIAL SOLUTION ARE TWO JETS EXPANDING IN A LOWER DENSITY ATMOSPHERE
    ! Initialize solution in the whole domain (including ghost cells)
    U(1, :, :) = U0(1)
    U(2, :, :) = U0(2)
    U(3, :, :) = U0(3)
    U(4, :, :) = U0(4)

    ! Create a jet at the bottom-left corner

    U(1, 1:20*4+4, 1:20*4+4) = UJ(1)
    U(2, 1:20*4+4, 1:20*4+4) = UJ(2) 
    U(3, 1:20*4+4, 1:20*4+4) = UJ(3) 
    U(4, 1:20*4+4, 1:20*4+4) = UJ(4) 
 
  end subroutine 

  ! ============================================================

  subroutine CPU_compute_primitive_from_conserved(U, prim)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: prim

    ! Working variables
    real :: D, mx, my, E, m2
    real :: W, rhoh, rho, ux, uy, P

    real :: H, dHdP
    real :: Pnew, tol
    integer      :: itermax, iter_count
    real :: error

    ! Extract conserved variables
    D  = U(1)
    mx = U(2)
    my = U(3)
    E  = U(4)

    m2 = mx*mx + my*my ! Working variable

    ! Initialize Newton solver
    tol        = real(1.0d-10)   ! Accepted error between iterations
    itermax    = 1000      ! Maxium number of iterations
    iter_count = 0         ! Initialize

    P      = 0.01 ! Init
    error  = 1.0 ! init

    ! Iterate until convergence
    do while (error .gt. tol)

      ! print*, 'Current P: ', P, '  error: ', error

      ! Function to be minimized...
      H = D*c*c*sqrt(P*P + 2.0*E*P + E*E - m2/c/c) + 1.0/(Gam-1.0)*P*P &
         + E*(2.0-Gam)/(Gam-1.0)*P + m2/c/c - E*E

      ! ... and its derivative
      dHdP = 2.0/(Gam-1.0)*P + E*(2.0-Gam)/(Gam-1.0) &
           + D*c*c*(P+E)/sqrt(P*P + 2.0*E*P + E*E - m2/c/c)

      Pnew  = P - H/dHdP    ! New pressure
      error = abs(Pnew - P) ! Compute error
      P     = Pnew          ! Update P

      iter_count = iter_count + 1
      if (iter_count .ge. itermax) then
        print*, "ATTENTION!"
        print*, "Iteration limit exceeded while computing primitive variables!"
        print*, "Current solution (conserved variables):", U
        print*, "Iteration: ", iter_count
        print*, "Residual error: ", error
        exit ! Exit do loop
      end if

    end do

    ! Compute other quantities
    W    = 1.0/sqrt(1.0 - m2/(c*c*(E+P)*(E+P))) ! Lorentz factor
    rho  = D/W
    rhoh = rho*c*c + P*Gam/(Gam-1.0)
    ux   = mx/(rhoh*W*W)
    uy   = my/(rhoh*W*W)

    ! Compose array of primitive variables
    prim(1) = rho
    prim(2) = ux
    prim(3) = uy
    prim(4) = P

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_primitive_from_conserved(U, prim)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: prim

    ! Working variables
    real :: D, mx, my, E, m2
    real :: W, rhoh, rho, ux, uy, P

    real :: H, dHdP
    real :: Pnew, tol
    integer      :: itermax, iter_count
    real :: error

    ! Extract conserved variables
    D  = U(1)
    mx = U(2)
    my = U(3)
    E  = U(4)

    m2 = mx*mx + my*my ! Working variable

    ! Initialize Newton solver
    tol        = real(1.0d-10)   ! Accepted error between iterations
    itermax    = 1000      ! Maxium number of iterations
    iter_count = 0         ! Initialize

    P      = 10.0 ! Init
    error  = 1.0 ! init

    ! Iterate until convergence
    do while (error .gt. tol)

      ! print*, 'Current P: ', P, '  error: ', error

      ! Function to be minimized...
      H = D*c*c*sqrt(P*P + 2.0*E*P + E*E - m2/c/c) + 1.0/(Gam-1.0)*P*P &
         + E*(2.0-Gam)/(Gam-1.0)*P + m2/c/c - E*E

      ! ... and its derivative
      dHdP = 2.0/(Gam-1.0)*P + E*(2.0-Gam)/(Gam-1.0) &
           + D*c*c*(P+E)/sqrt(P*P + 2.0*E*P + E*E - m2/c/c)

      Pnew  = P - H/dHdP    ! New pressure
      error = abs(Pnew - P) ! Compute error
      P     = Pnew          ! Update P

      iter_count = iter_count + 1
      if (iter_count .ge. itermax) then
        ! print*, "ATTENTION!"
        ! print*, "Iteration limit exceeded while computing primitive variables!"
        ! print*, "Current solution (conserved variables):", U
        ! print*, "Iteration: ", iter_count
        ! print*, "Residual error: ", error
        exit ! Exit do loop
      end if

    end do

    ! Compute other quantities
    W    = 1.0/sqrt(1.0 - m2/(c*c*(E+P)*(E+P))) ! Lorentz factor
    rho  = D/W
    rhoh = rho*c*c + P*Gam/(Gam-1.0)
    ux   = mx/(rhoh*W*W)
    uy   = my/(rhoh*W*W)

    ! Compose array of primitive variables
    prim(1) = rho
    prim(2) = ux
    prim(3) = uy
    prim(4) = P

  end subroutine
 
  ! ============================================================
 
  subroutine CPU_compute_conserved_from_primitive(prim, U)

    ! Computes vector of conserved variables "U" from the primitive variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: prim
    real, dimension(Neq), intent(out) :: U

    ! Working variables
    real :: rho, ux, uy, P, u2
    real :: W, D, rhoh, mx, my, E

    ! Extract primitive variables
    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    ! Compute Lorentz factor and enthalpy
    u2   = ux*ux + uy*uy
    W    = 1.0/sqrt(1.0 - u2/(c*c))
    rhoh = rho*c*c + P*Gam/(Gam-1.0) ! Equation of state

    ! Build conserved variables
    D  = rho*W
    mx = rhoh*W*W*ux
    my = rhoh*W*W*uy
    E  = rhoh*W*W - P

    ! Compose array of conserved variables
    U(1) = D
    U(2) = mx
    U(3) = my
    U(4) = E

  end subroutine
  
  ! ============================================================

  attributes(device) subroutine compute_conserved_from_primitive(prim, U)

    ! Computes vector of conserved variables "U" from the primitive variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: prim
    real, dimension(Neq), intent(out) :: U

    ! Working variables
    real :: rho, ux, uy, P, u2
    real :: W, D, rhoh, mx, my, E

    ! Extract primitive variables
    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    ! Compute Lorentz factor and enthalpy
    u2   = ux*ux + uy*uy
    W    = 1.0/sqrt(1.0 - u2/(c*c))
    rhoh = rho*c*c + P*Gam/(Gam-1.0) ! Equation of state

    ! Build conserved variables
    D  = rho*W
    mx = rhoh*W*W*ux
    my = rhoh*W*W*uy
    E  = rhoh*W*W - P

    ! Compose array of conserved variables
    U(1) = D
    U(2) = mx
    U(3) = my
    U(4) = E

  end subroutine
  
  ! ============================================================

  attributes(device) subroutine compute_flux_ws_x(U, Fx, ws_max, ws_min)

    ! Computes the convective flux along x,
    ! and also the maximum and minimum wave speeds (required by some numerical flux schemes)

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: Fx
    real, intent(out) :: ws_max, ws_min

    real, dimension(Neq) :: prim
    real :: rho, ux, uy, P, D, mx, my, a, rhoh

    ! Compute primitive variables
    D  = U(1)
    mx = U(2)
    my = U(3)

    call compute_primitive_from_conserved(U, prim)

    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    ! Assemble fluxes Fx
    Fx(1) = D*ux
    Fx(2) = mx*ux + P
    Fx(3) = mx*uy
    Fx(4) = mx

    ! Maximum and minimum wave speeds (eigenvalues of the Euler system)
    rhoh = rho*c*c + P*Gam/(Gam-1.0)
    a    = c*sqrt(Gam-1.0)*sqrt(1.0 - rho*c*c/rhoh);

    ws_min = (ux - a)/(1.0- ux*a);
    ws_max = (ux + a)/(1.0 + ux*a);

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_flux_ws_y(U, Fy, ws_max, ws_min)

    ! Computes the convective flux along y,
    ! and also the maximum and minimum wave speeds (required by some numerical flux schemes)

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: Fy
    real, intent(out) :: ws_max, ws_min
 
    real, dimension(Neq) :: prim
    real :: rho, ux, uy, P, D, mx, my, a, rhoh

    ! Compute primitive variables
    D  = U(1)
    mx = U(2)
    my = U(3)

    call compute_primitive_from_conserved(U, prim)

    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    ! Assemble fluxes Fx
    Fy(1) = D*uy
    Fy(2) = mx*uy
    Fy(3) = my*uy + P
    Fy(4) = my

    ! Maximum and minimum wave speeds (eigenvalues of the Euler system)
    rhoh = rho*c*c + P*Gam/(Gam-1.0)
    a    = c*sqrt(Gam-1.0)*sqrt(1.0 - rho*c*c/rhoh);

    ws_min = (uy - a)/(1.0 - uy*a);
    ws_max = (uy + a)/(1.0 + uy*a);

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_max_min_wavespeeds_xy(U, Smax_x, Smin_x, Smax_y, Smin_y)

    ! Returns the maximum and minimum wavespeeds for the state U

    implicit none

    real, dimension(Neq), intent(in) :: U
    real, intent(out) :: Smax_x, Smin_x, Smax_y, Smin_y

    real, dimension(Neq) :: dummy

    call compute_flux_ws_x(U, dummy, Smax_x, Smin_x)
    call compute_flux_ws_y(U, dummy, Smax_y, Smin_y)

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_source_term(U, i, j, Src)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    integer,              intent(in)  :: i, j
    real, dimension(Neq), intent(out) :: Src

    ! Working variables
    real, dimension(Neq) :: prim

    real :: rho, ux, uy, P
    real :: y_j

    call compute_primitive_from_conserved(U, prim)

    ! Compose array of primitive variables
    rho = prim(1) 
    ux  = prim(2) 
    uy  = prim(3) 
    P   = prim(4) 

    y_j = y_min + dy/2.0 + real(j-5)*dy ! Remember: 4 ghost cells per side

    Src = 0.0
    Src(3) = P/y_j

  end subroutine
 
  ! ============================================================
 
   attributes(global) subroutine assign_BCs(U)
 
   ! This subroutine assigns boundary values to the ghost cells. 
   ! If X_PERIODIC or Y_PERIODIC booleans are set, then periodic BCs are updated. 
   ! This is done by copying into the ghost cells the values inside the 
   ! domain cells at the other side of the domain.
   ! Otherwise, if these are not set, the boundary cells are left at their previous value.
  
     implicit none
 
     real, dimension(:,:,:) :: U ! This is a device variable, in global memory
 
     integer :: i, j
 
     i = (blockIdx%x - 1)*blockDim%x + threadIDx%x
     j = (blockIdx%y - 1)*blockDim%y + threadIDx%y
 
     ! ----- Periodic BCs ------
     if (X_PERIODIC) then
 
       if (i .eq. 1) then
         U(:, i,j) = U(:, Nx-7,j)
       else if (i .eq. 2) then
         U(:, i,j) = U(:, Nx-6,j)
       else if (i .eq. 3) then
         U(:, i,j) = U(:, Nx-5,j)
       else if (i .eq. 4) then
         U(:, i,j) = U(:, Nx-4,j)
 
       else if (i .eq. Nx-3) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. Nx-2) then
         U(:, i,j) = U(:, 6,j)
       else if (i .eq. Nx-1) then
         U(:, i,j) = U(:, 7,j)
       else if (i .eq. Nx)   then
         U(:, i,j) = U(:, 8,j)
       end if
 
     end if
 
     if (Y_PERIODIC) then
 
       if (j .eq. 1) then
         U(:, i,j) = U(:, i, Ny-7)
       else if (j .eq. 2) then
         U(:, i,j) = U(:, i, Ny-6)
       else if (j .eq. 3) then
         U(:, i,j) = U(:, i, Ny-5)
       else if (j .eq. 4) then
         U(:, i,j) = U(:, i, Ny-4)
 
       else if (j .eq. Ny-3) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. Ny-2) then
         U(:, i,j) = U(:, i, 6)
       else if (j .eq. Ny-1) then
         U(:, i,j) = U(:, i, 7)
       else if (j .eq. Ny)   then
         U(:, i,j) = U(:, i, 8)
       end if
 
     end if
 
     ! ----- Zero Gradient -----
 
     if (X_low_ZEROGRAD) then
       if (i .eq. 1) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 2) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 3) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 4) then
         U(:, i,j) = U(:, 5,j)
       end if
     end if
 
     if (X_high_ZEROGRAD) then
       if (i .eq. Nx-3) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx-2) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx-1) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx) then
         U(:, i,j) = U(:, Nx-4,j)
       end if
     end if
 
     if (Y_low_ZEROGRAD) then
       if (j .eq. 1) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 2) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 3) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 4) then
         U(:, i,j) = U(:, i, 5)
       end if
     end if
 
     if (Y_high_ZEROGRAD) then
       if (j .eq. Ny-3) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny-2) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny-1) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny) then
         U(:, i,j) = U(:, i, Ny-4)
       end if
     end if
 
     ! Axi-symmetric solution
     if (bool_AXI) then
 
       !! TODO: iumplement this in the PDE module      
 
       U(:,i,4) =   U(:,i,5)
       U(3,i,4) = - U(3,i,5) ! rho uy
 
       U(:,i,3) =   U(:,i,6)
       U(3,i,3) = - U(3,i,6) ! rho uy
 
       U(:,i,2) =   U(:,i,7)
       U(3,i,2) = - U(3,i,7) ! rho uy
 
       U(:,i,1) =   U(:,i,8)
       U(3,i,1) = - U(3,i,8) ! rho uy
 
     end if
 
   end subroutine 



end module
