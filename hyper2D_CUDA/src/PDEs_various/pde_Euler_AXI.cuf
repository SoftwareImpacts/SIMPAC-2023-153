module pde

! This module contains all information that appears inside the PDEs.
! It specifies how many equations shall be solved, the numerical data,
! the routines to compute the fluxes from the solution, routines for
! computing primitive variables from the conserved solution U, etc.
!
! ----- EULER EQUATIONS -------

  use global_module

  implicit none

  ! Adiabatic constant "gamma" (ratio of specific heats, cp/cv)
  real, parameter    :: gam = 1.66667
  integer, parameter :: Neq = 4 ! Number of equations

  ! Initial conditions in the domain
  real, parameter :: rho0 = 1.0   ! [kg/m3]
  real, parameter :: ux0  = 0.0   ! [m/s]
  real, parameter :: uy0  = 0.0   ! [m/s]
  real, parameter :: P0   = 1.0   ! [Pa]

  ! Name of primitive variables, used ONLY for exporting the solution to VTK file
  ! NOTE: To initialize it here, all entries need to have the same length!!!
  !       I'm using three letters for simplicity.
  character(len=20), dimension(Neq) :: prim_names = (/'rho','UUx','UUy','PPP'/)

  contains

  ! ============================================================

  subroutine initialize_solution(U)
 
    implicit none

    real, dimension(:,:,:), intent(inout) :: U

    integer      :: i, j
    integer      :: j_jet_start, j_jet_end, i_jet_start, i_jet_end
    real :: uJET
    real :: x_jet_start, x_jet_end
    real :: y_jet_start, y_jet_end

    ! THIS INITIAL SOLUTION ARE TWO JETS EXPANDING IN A LOWER DENSITY ATMOSPHERE
    ! Initialize solution in the whole domain
    U(1, :, :) = rho0*2.0     ! Density
    U(2, :, :) = rho0*2.0*ux0 ! Momentum along x
    U(3, :, :) = rho0*2.0*uy0 ! Momentum along y
    U(4, :, :) = rho0*2.0*(ux0**2 + uy0**2)/2.0 + P0/(gam-1.0) ! total energy

    ! Create a jet at the bottom-left corner
    uJET    = 0.25d0; ! [m/s] 

    ! ----- LEFT BC (x_min, whatever y) --------

    U(1, 1:floor(Nx/10.0), 1:floor(Ny/5.0)) = rho0     ! Density
    U(2, 1:floor(Nx/10.0), 1:floor(Ny/5.0)) = rho0*uJET ! Momentum along x
    U(3, 1:floor(Nx/10.0), 1:floor(Ny/5.0)) = rho0*0.0 ! Momentum along y
    U(4, 1:floor(Nx/10.0), 1:floor(Ny/5.0)) = rho0*(uJET**2 + 0.0**2)/2.0 + P0/(gam-1.0) ! total energy
 
  end subroutine 

  ! ============================================================

  subroutine CPU_compute_primitive_from_conserved(U, prim)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: prim

    ! Working variables
    real :: rho, ux, uy, P

    ! Extract primitive variables
    rho = U(1)
    ux  = U(2)/(rho + 1.0d-25) ! Use a small tolerance, since rho may be zero
    uy  = U(3)/(rho + 1.0d-25) ! Use a small tolerance, since rho may be zero
    P   = (gam - 1.0)*( U(4) - rho*(ux**2.0 + uy**2.0)/2.0 )

    ! Compose array of primitive variables
    prim(1) = rho
    prim(2) = ux
    prim(3) = uy 
    prim(4) = P

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_primitive_from_conserved(U, prim)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: prim

    ! Working variables
    real :: rho, ux, uy, P

    ! Extract primitive variables
    rho = U(1)
    ux  = U(2)/(rho + 1.0d-25) ! Use a small tolerance, since rho may be zero
    uy  = U(3)/(rho + 1.0d-25) ! Use a small tolerance, since rho may be zero
    P   = (gam - 1.0)*( U(4) - rho*(ux**2.0 + uy**2.0)/2.0 )

    ! Compose array of primitive variables
    prim(1) = rho
    prim(2) = ux
    prim(3) = uy 
    prim(4) = P

  end subroutine
  
  ! ============================================================

  attributes(device) subroutine compute_conserved_from_primitive(prim, U)

    ! Computes vector of conserved variables "U" from the primitive variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: prim
    real, dimension(Neq), intent(out) :: U

    ! Working variables
    real :: rho, ux, uy, P

    ! Extract primitive variables
    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    ! Compose array of primitive variables
    U(1) = rho
    U(2) = rho*ux
    U(3) = rho*uy 
    U(4) = rho*(ux*ux+uy*uy)/2.0 + P/(gam-1.0) 

  end subroutine
  
  ! ============================================================

  attributes(device) subroutine compute_flux_ws_x(U, Fx, ws_max, ws_min)

    ! Computes the convective flux along x,
    ! and also the maximum and minimum wave speeds (required by some numerical flux schemes)

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: Fx
    real, intent(out) :: ws_max, ws_min
  
    real, dimension(Neq) :: prim
    real :: rho, ux, uy, P, rhoE
    
    ! Compute primitive variables
    call compute_primitive_from_conserved(U, prim)
    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    rhoE = rho*(ux*ux + uy*uy)/2.0 + P/(gam-1)

    ! Assemble fluxes Fx
    Fx(1) = rho*ux
    Fx(2) = rho*ux*ux + P
    Fx(3) = rho*ux*uy
    Fx(4) = rhoE*ux + P*ux
  
    ! Maximum and minimum wave speeds (eigenvalues of the Euler system)
    ws_max = ux + sqrt(gam*P/rho)
    ws_min = ux - sqrt(gam*P/rho)

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_flux_ws_y(U, Fy, ws_max, ws_min)

    ! Computes the convective flux along y,
    ! and also the maximum and minimum wave speeds (required by some numerical flux schemes)

    implicit none

    real, dimension(Neq), intent(in)  :: U
    real, dimension(Neq), intent(out) :: Fy
    real, intent(out) :: ws_max, ws_min
  
    real, dimension(Neq) :: prim
    real :: rho, ux, uy, P, rhoE
    
    ! Compute primitive variables
    call compute_primitive_from_conserved(U, prim)
    rho = prim(1)
    ux  = prim(2)
    uy  = prim(3)
    P   = prim(4)

    rhoE = rho*(ux*ux + uy*uy)/2.0 + P/(gam-1)

    ! Assemble fluxes Fy
    Fy(1) = rho*uy
    Fy(2) = rho*ux*uy
    Fy(3) = rho*uy*uy + P
    Fy(4) = rhoE*uy + P*uy
  
    ! Maximum and minimum wave speeds (eigenvalues of the Euler system)
    ws_max = uy + sqrt(gam*P/rho)
    ws_min = uy - sqrt(gam*P/rho)

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_max_min_wavespeeds_xy(U, Smax_x, Smin_x, Smax_y, Smin_y)

    ! Returns the maximum and minimum wavespeeds for the state U

    implicit none

    real, dimension(Neq), intent(in) :: U
    real, intent(out) :: Smax_x, Smin_x, Smax_y, Smin_y

    real, dimension(Neq) :: dummy

    call compute_flux_ws_x(U, dummy, Smax_x, Smin_x)
    call compute_flux_ws_y(U, dummy, Smax_y, Smin_y)

  end subroutine

  ! ============================================================

  attributes(device) subroutine compute_source_term(U, i, j, Src)

    ! Computes vector of primitive variables "prim" from the conserved variables "U"

    implicit none

    real, dimension(Neq), intent(in)  :: U
    integer,              intent(in)  :: i, j
    real, dimension(Neq), intent(out) :: Src

    ! Working variables
    real, dimension(Neq) :: prim

    real :: rho, ux, uy, P, rhoE
    real :: y_j

    call compute_primitive_from_conserved(U, prim)

    ! Compose array of primitive variables
    rho = prim(1) 
    ux  = prim(2) 
    uy  = prim(3) 
    P   = prim(4) 

    y_j = y_min + dy/2.0d0 + real(j-5)*dy ! Remember: 4 ghost cells per side

    ! Src = Src/y_j

    Src = 0.0d0
    Src(3) = P/y_j

  end subroutine
 
  ! ============================================================

   attributes(global) subroutine assign_BCs(U)
 
   ! This subroutine assigns boundary values to the ghost cells. 
   ! If X_PERIODIC or Y_PERIODIC booleans are set, then periodic BCs are updated. 
   ! This is done by copying into the ghost cells the values inside the 
   ! domain cells at the other side of the domain.
   ! Otherwise, if these are not set, the boundary cells are left at their previous value.
  
     implicit none
 
     real, dimension(:,:,:) :: U ! This is a device variable, in global memory
 
     integer :: i, j
 
     i = (blockIdx%x - 1)*blockDim%x + threadIDx%x
     j = (blockIdx%y - 1)*blockDim%y + threadIDx%y
 
     ! ----- Periodic BCs ------
     if (X_PERIODIC) then
 
       if (i .eq. 1) then
         U(:, i,j) = U(:, Nx-7,j)
       else if (i .eq. 2) then
         U(:, i,j) = U(:, Nx-6,j)
       else if (i .eq. 3) then
         U(:, i,j) = U(:, Nx-5,j)
       else if (i .eq. 4) then
         U(:, i,j) = U(:, Nx-4,j)
 
       else if (i .eq. Nx-3) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. Nx-2) then
         U(:, i,j) = U(:, 6,j)
       else if (i .eq. Nx-1) then
         U(:, i,j) = U(:, 7,j)
       else if (i .eq. Nx)   then
         U(:, i,j) = U(:, 8,j)
       end if
 
     end if
 
     if (Y_PERIODIC) then
 
       if (j .eq. 1) then
         U(:, i,j) = U(:, i, Ny-7)
       else if (j .eq. 2) then
         U(:, i,j) = U(:, i, Ny-6)
       else if (j .eq. 3) then
         U(:, i,j) = U(:, i, Ny-5)
       else if (j .eq. 4) then
         U(:, i,j) = U(:, i, Ny-4)
 
       else if (j .eq. Ny-3) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. Ny-2) then
         U(:, i,j) = U(:, i, 6)
       else if (j .eq. Ny-1) then
         U(:, i,j) = U(:, i, 7)
       else if (j .eq. Ny)   then
         U(:, i,j) = U(:, i, 8)
       end if
 
     end if
 
     ! ----- Zero Gradient -----
 
     if (X_low_ZEROGRAD) then
       if (i .eq. 1) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 2) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 3) then
         U(:, i,j) = U(:, 5,j)
       else if (i .eq. 4) then
         U(:, i,j) = U(:, 5,j)
       end if
     end if
 
     if (X_high_ZEROGRAD) then
       if (i .eq. Nx-3) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx-2) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx-1) then
         U(:, i,j) = U(:, Nx-4,j)
       else if (i .eq. Nx) then
         U(:, i,j) = U(:, Nx-4,j)
       end if
     end if
 
     if (Y_low_ZEROGRAD) then
       if (j .eq. 1) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 2) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 3) then
         U(:, i,j) = U(:, i, 5)
       else if (j .eq. 4) then
         U(:, i,j) = U(:, i, 5)
       end if
     end if
 
     if (Y_high_ZEROGRAD) then
       if (j .eq. Ny-3) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny-2) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny-1) then
         U(:, i,j) = U(:, i, Ny-4)
       else if (j .eq. Ny) then
         U(:, i,j) = U(:, i, Ny-4)
       end if
     end if
 
     ! Axi-symmetric solution
     if (bool_AXI) then
 
       U(:,i,4) =   U(:,i,5)
       U(3,i,4) = - U(3,i,5) ! rho uy
 
       U(:,i,3) =   U(:,i,6)
       U(3,i,3) = - U(3,i,6) ! rho uy
 
       U(:,i,2) =   U(:,i,7)
       U(3,i,2) = - U(3,i,7) ! rho uy
 
       U(:,i,1) =   U(:,i,8)
       U(3,i,1) = - U(3,i,8) ! rho uy
 
     end if
 
   end subroutine 

end module
